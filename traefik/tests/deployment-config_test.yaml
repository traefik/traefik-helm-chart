suite: Deployment configuration
templates:
  - deployment.yaml
tests:
  - it: should provide expected defaults
    asserts:
      - equal:
          path: spec.replicas
          value: 1
      - equal:
          path: spec.template.spec.automountServiceAccountToken
          value: true
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
      - equal:
          path: spec.strategy.rollingUpdate.maxUnavailable
          value: 0
      - equal:
          path: spec.strategy.rollingUpdate.maxSurge
          value: 1
      - equal:
          path: metadata.namespace
          value: NAMESPACE
  - it: should have the specified amount of replicas when specified via values
    set:
      deployment:
        replicas: 3
    asserts:
      - equal:
          path: spec.replicas
          value: 3
  - it: should not have replicas when autoscaling is enabled
    set:
      autoscaling:
        enabled: true
    asserts:
      - notExists:
          path: spec.replicas
  - it: should not have replicas when autoscaling is enabled for the deployment
    set:
      autoscaling:
        enabled: true
        scaleTargetRef:
          apiVersion: apps/v1
          kind: Deployment
          name: '{{ template "traefik.fullname" . }}'
    asserts:
      - notExists:
          path: spec.replicas
  - it: should have zero replicas by default when autoscaling is enabled for another resource
    set:
      deployment:
        replicas: null
      autoscaling:
        enabled: true
        scaleTargetRef:
          apiVersion: apps/v1
          kind: StatefulSet
          name: 'another-resource'
    asserts:
      - equal:
          path: spec.replicas
          value: 0
  - it: should have specified replicas when autoscaling is enabled for another resource
    set:
      deployment:
        replicas: 5
      autoscaling:
        enabled: true
        scaleTargetRef:
          apiVersion: apps/v1
          kind: StatefulSet
          name: 'another-resource'
    asserts:
      - equal:
          path: spec.replicas
          value: 5
  - it: should have revisionHistoryLimit with specified value
    set:
      deployment:
        revisionHistoryLimit: 1
    asserts:
      - equal:
          path: spec.revisionHistoryLimit
          value: 1
  - it: should have a custom merged rollingUpdate strategy with specified values
    set:
      updateStrategy:
        rollingUpdate:
          maxUnavailable: 4
    asserts:
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
      - equal:
          path: spec.strategy.rollingUpdate.maxUnavailable
          value: 4
      - equal:
          path: spec.strategy.rollingUpdate.maxSurge
          value: 1
  - it: should have annotations with specified values
    set:
      deployment:
        annotations:
          traefik/powpow: annotations
        podAnnotations:
          traefik/powpow: podAnnotations
    asserts:
      - equal:
          path: metadata.annotations.traefik/powpow
          value: annotations
      - equal:
          path: spec.template.metadata.annotations.traefik/powpow
          value: podAnnotations
  - it: should have podAnnotations with specified values
    set:
      type: 'internal'
      deployment:
        podAnnotations:
          traefik/powpow: podAnnotations
          traefik/name: '{{ template "traefik.name" . }}'
          traefik/{{ template "traefik.name" . }}.logs: 'log_processing_rules'
          traefik/type: '{{ .Values.type }}'
    asserts:
      - equal:
          path: spec.template.metadata.annotations.traefik/powpow
          value: podAnnotations
      - equal:
          path: spec.template.metadata.annotations.traefik/name
          value: 'traefik'
      - equal:
          path: spec.template.metadata.annotations["traefik/traefik.logs"]
          value: 'log_processing_rules'
      - equal:
          path: spec.template.metadata.annotations.traefik/type
          value: 'internal'
  - it: should have labels with specified values
    set:
      deployment:
        labels:
          traefik/powpow: labels
        podLabels:
          traefik/powpow: podLabels
    asserts:
      - equal:
          path: metadata.labels.traefik/powpow
          value: labels
      - equal:
          path: spec.template.metadata.labels.traefik/powpow
          value: podLabels
  - it: should have minReadySeconds with specified value
    set:
      deployment:
        minReadySeconds: 30
    asserts:
      - equal:
          path: spec.minReadySeconds
          value: 30
  - it: should have a preStop hook with specified values
    set:
      deployment:
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 40"]
    asserts:
      - equal:
          path: spec.template.spec.containers[0].lifecycle.preStop.exec.command
          value: ["/bin/sh", "-c", "sleep 40"]
  - it: should have a postStart hook with specified values
    set:
      deployment:
        lifecycle:
          postStart:
            httpGet:
              path: /ping
              port: 9000
              host: localhost
              scheme: HTTP
    asserts:
      - equal:
          path: spec.template.spec.containers[0].lifecycle.postStart.httpGet.path
          value: /ping
      - equal:
          path: spec.template.spec.containers[0].lifecycle.postStart.httpGet.port
          value: 9000
      - equal:
          path: spec.template.spec.containers[0].lifecycle.postStart.httpGet.host
          value: localhost
      - equal:
          path: spec.template.spec.containers[0].lifecycle.postStart.httpGet.scheme
          value: HTTP
  - it: should have affinity with specified value
    values:
      - ./values/antiaffinity.yaml
    asserts:
      - equal:
          path: spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[0].topologyKey
          value: kubernetes.io/hostname
  - it: should have Recreate strategy when set
    set:
      updateStrategy:
        type: Recreate
    asserts:
      - equal:
          path: spec.strategy.type
          value: Recreate
      - notExists:
          path: spec.strategy.rollingUpdate
  - it: should accept overridden namespace
    set:
      namespaceOverride: "traefik-ns-override"
    asserts:
      - equal:
          path: metadata.namespace
          value: "traefik-ns-override"
  - it: should set default values for args
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args
          value:
            - --global.checkNewVersion
            - --entryPoints.metrics.address=:9100/tcp
            - --entryPoints.traefik.address=:8080/tcp
            - --entryPoints.web.address=:8000/tcp
            - --entryPoints.websecure.address=:8443/tcp
            - --api.dashboard=true
            - --ping=true
            - --metrics.prometheus=true
            - --metrics.prometheus.entrypoint=metrics
            - --providers.kubernetescrd
            - --providers.kubernetescrd.allowEmptyServices=true
            - --providers.kubernetesingress
            - --providers.kubernetesingress.allowEmptyServices=true
            - --providers.kubernetesingress.ingressendpoint.publishedservice=NAMESPACE/RELEASE-NAME-traefik
            - --entryPoints.websecure.http.tls=true
            - --log.level=INFO
      - notContains:
          path: spec.template.spec.containers[0].args
          content: "--global.sendAnonymousUsage"
  - it: should be possible to send anonymous usage data
    set:
      global:
        sendAnonymousUsage: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--global.sendAnonymousUsage"
  - it: should have abortOnPluginFailure, when enabled on traefik >=3.3.0
    set:
      image:
        tag: v3.3.0
      experimental:
        abortOnPluginFailure: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--experimental.abortonpluginfailure=true"
  - it: should fail when using obsolete syntax
    set:
      ports:
        web:
          redirectTo: websecure
        websecure:
          exposedPort: 443
    asserts:
      - failedTemplate:
          errorPattern: "redirectTo"
  - it: should fail when using previous syntax
    set:
      ports:
        web:
          redirectTo:
            port: websecure
        websecure:
          exposedPort: 443
    asserts:
      - failedTemplate:
          errorMessage: "ERROR: redirectTo syntax has been removed in v34 of this Chart. See Release notes or EXAMPLES.md for new syntax."
  - it: should fail when redirect on websecure without https scheme
    set:
      ports:
        web:
          redirections:
            entryPoint:
              to: websecure
        websecure:
          exposedPort: 443
    asserts:
      - failedTemplate:
          errorMessage: "ERROR: Cannot redirect web to websecure without setting scheme to https"
  - it: should fail when redirect on non-existent entrypoint
    set:
      ports:
        web:
          redirections:
            entryPoint:
              to: foo
        websecure:
          exposedPort: 443
    asserts:
      - failedTemplate:
          errorMessage: "ERROR: Cannot redirect web to foo: entryPoint not found"
  - it: should be possible to set an http redirections
    set:
      ports:
        web:
          redirections:
            entryPoint:
              to: websecure
              scheme: https
        websecure:
          exposedPort: 443
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--entryPoints.web.http.redirections.entryPoint.to=:443"
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--entryPoints.web.http.redirections.entryPoint.scheme=https"
  - it: should have http redirections enabled, when enabled with redirectTo and priority
    set:
      ports:
        web:
          redirections:
            entryPoint:
              to: websecure
              scheme: https
              priority: 10
        websecure:
          exposedPort: 443
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--entryPoints.web.http.redirections.entryPoint.priority=10"
  - it: should have permanent http redirections enabled, when enabled with redirectTo and permanent
    set:
      ports:
        web:
          redirections:
            entryPoint:
              to: websecure
              scheme: https
              permanent: true
        websecure:
          exposedPort: 443
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--entryPoints.web.http.redirections.entryPoint.permanent=true"
  - it: should have permanent http redirections disabled, when enabled with redirectTo and permanent set to false
    set:
      ports:
        web:
          redirections:
            entryPoint:
              to: websecure
              scheme: https
              permanent: false
        websecure:
          exposedPort: 443
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--entryPoints.web.http.redirections.entryPoint.permanent=false"

suite: Pod configuration
templates:
  - deployment.yaml
capabilities:
  majorVersion: 1
  minorVersion: 16
tests:
  - it: should have set GOMAXPROCS with cpu limit
    set:
      resources:
        limits:
          cpu: "4"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                resource: limits.cpu
                divisor: "1"
  - it: should have set GOMEMLIMIT with bytes memory limit
    set:
      resources:
        limits:
          memory: "128974848"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: GOMEMLIMIT
            value: "110MiB"
  - it: should have set GOMEMLIMIT with exponential memory limit
    set:
      resources:
        limits:
          memory: "129e6"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: GOMEMLIMIT
            value: "110MiB"
  - it: should have set GOMEMLIMIT with SI memory limit
    set:
      resources:
        limits:
          memory: "129M"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: GOMEMLIMIT
            value: "110MiB"
  - it: should have set GOMEMLIMIT SI (small unit) with memory limit
    set:
      resources:
        limits:
          memory: "128974848000m"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: GOMEMLIMIT
            value: "110MiB"
  - it: should have set GOMEMLIMIT with IEC memory limit
    set:
      resources:
        limits:
          memory: "123Mi"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: GOMEMLIMIT
            value: "110MiB"
  - it: should have not set GOMAXPROCS without cpu limit
    asserts:
      - notEqual:
          path: spec.template.spec.containers[0].env[0].name
          value: GOMAXPROCS
  - it: should have not set GOMEMLIMIT without memory limit
    asserts:
      - notEqual:
          path: spec.template.spec.containers[0].env[0].name
          value: GOMEMLIMIT
  - it: should have expected env + additional env with specified values
    set:
      env:
        - name: POD_TEST
          value: powpow
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: POD_TEST
            value: powpow
  - it: should have envFrom with specified values
    set:
      envFrom:
        - configMapRef:
            name: config-map-name
        - secretRef:
            name: secret-name
    asserts:
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].configMapRef.name
          value: config-map-name
      - equal:
          path: spec.template.spec.containers[0].envFrom[1].secretRef.name
          value: secret-name
  - it: should have priorityClassName
    set:
      priorityClassName: important
    asserts:
      - equal:
          path: spec.template.spec.priorityClassName
          value: important
  - it: should have merged securityContext
    set:
      podSecurityContext:
        readOnlyRootFilesystem: false
      securityContext:
        allowPrivilegeEscalation: true
        runAsUser: 1000
    asserts:
      - equal:
          path: spec.template.spec.securityContext.readOnlyRootFilesystem
          value: false
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - equal:
          path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: true
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 1000
  - it: should have pvc with specified value
    set:
      persistence:
        enabled: true
        existingClaim: existing-pvc
    asserts:
      - equal:
          path: spec.template.spec.volumes[0].persistentVolumeClaim.claimName
          value: existing-pvc
      - equal:
          path: spec.template.spec.volumes[0].name
          value: data
  - it: should have pvc with specified name
    set:
      persistence:
        name: my-data
    asserts:
      - equal:
          path: spec.template.spec.volumes[0].name
          value: my-data
  - it: should have initContainer with specified value
    set:
      deployment:
        initContainers:
          - name: volume-permissions
            image: busybox:1.31.1
            command: ["sh"]
            volumeMounts:
              - name: data
                mountPath: /data
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: volume-permissions
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: busybox:1.31.1
      - equal:
          path: spec.template.spec.initContainers[0].command[0]
          value: sh
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[0].name
          value: data
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[0].mountPath
          value: /data
  - it: should have additional containers
    set:
      deployment:
        additionalContainers:
          - image: foo:latest
            name: bar
    asserts:
      - equal:
          path: spec.template.spec.containers[1].image
          value: foo:latest
      - equal:
          path: spec.template.spec.containers[1].name
          value: bar
  - it: should have additional volumes
    set:
      deployment:
        additionalVolumes:
          - hostpath:
              path: /foo
            name: bar
    asserts:
      - equal:
          path: spec.template.spec.volumes[2].hostpath.path
          value: /foo
      - equal:
          path: spec.template.spec.volumes[2].name
          value: bar
  - it: should support secret name with '.' for volumes
    set:
      volumes:
        - name: certs.traefik.io
          mountPath: "/certs"
          type: secret
    asserts:
      - equal:
          path: spec.template.spec.volumes[2].name
          value: certs-traefik-io
      - equal:
          path: spec.template.spec.volumes[2].secret.secretName
          value: certs.traefik.io
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[2].name
          value: certs-traefik-io
  - it: should have imagePullPolicy with specified value
    set:
      image:
        pullPolicy: Always
    asserts:
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: Always
  - it: should have no imagePullSecrets
    asserts:
      - isNull:
          path: spec.template.spec.imagePullSecrets
  - it: should have imagePullSecrets with specified value
    set:
      deployment:
        imagePullSecrets:
          - name: myRegistryKeySecretName
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: myRegistryKeySecretName
  - it: should have multiple imagePullSecrets with specified value
    set:
      deployment:
        imagePullSecrets:
          - name: myRegistryKeySecretName
          - name: myOtherRegistryKeySecretName
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: myRegistryKeySecretName
      - equal:
          path: spec.template.spec.imagePullSecrets[1].name
          value: myOtherRegistryKeySecretName
  - it: should have shareProcessNamespace enabled
    set:
      deployment:
        shareProcessNamespace: true
    asserts:
      - equal:
          path: spec.template.spec.shareProcessNamespace
          value: true
  - it: should have customized labels when specified via values
    set:
      deployment:
        podLabels:
          custom-label: custom-value
    asserts:
      - equal:
          path: spec.template.metadata.labels.custom-label
          value: custom-value
  - it: should have no nodeSelector by default
    asserts:
      - isNull:
          path: spec.template.spec.nodeSelector
  - it: should have a custom nodeSelector when specified
    set:
      nodeSelector:
        planet: earth
        disktype: ssd
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector.planet
          value: earth
      - equal:
          path: spec.template.spec.nodeSelector.disktype
          value: ssd
  - it: should have a custom terminationGracePeriodSeconds when specified
    set:
      deployment:
        terminationGracePeriodSeconds: 30
    asserts:
      - equal:
          path: spec.template.spec.terminationGracePeriodSeconds
          value: 30

  - it: should have no tolerations by default
    asserts:
      - isNull:
          path: spec.template.spec.tolerations
  - it: should have a custom toleration when specified
    set:
      tolerations:
        - key: "key"
          operator: "Equal"
          value: "value"
          effect: "NoSchedule"
        - key: "RSA"
          operator: "Destructor"
    asserts:
      - contains:
          path: spec.template.spec.tolerations
          content:
            key: "key"
            operator: "Equal"
            value: "value"
            effect: "NoSchedule"
      - contains:
          path: spec.template.spec.tolerations
          content:
            key: "RSA"
            operator: "Destructor"
  - it: When gateway provider is enabled, k8s providers & default statusAddress should be set
    set:
      providers:
        kubernetesGateway:
          enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--providers.kubernetescrd"
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--providers.kubernetesingress"
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--providers.kubernetesgateway"
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--providers.kubernetesgateway.statusaddress.service.name=RELEASE-NAME-traefik"
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--providers.kubernetesgateway.statusaddress.service.namespace=NAMESPACE"
  - it: When gateway provider is enabled with ns override, k8s providers & default statusAddress should be set
    set:
      namespaceOverride: foo
      providers:
        kubernetesGateway:
          enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--providers.kubernetesgateway.statusaddress.service.namespace=foo"


  - it: should have experimental flag when set
    set:
      experimental:
        kubernetesGateway:
          enabled: true
        fastProxy:
          enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--experimental.kubernetesgateway"
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--experimental.fastProxy"
  - it: should have debug experimental flag on fastProxy when set
    set:
      experimental:
        fastProxy:
          debug: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--experimental.fastProxy.debug"

  - it: shouldn't have experimental flag when >= 3.1.0
    set:
      image:
        tag: v3.1.0
      providers:
        kubernetesGateway:
          enabled: true
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].args
          content: "--experimental.kubernetesgateway"
  - it: should have the certificate resolver options applied
    set:
      certificatesResolvers:
        myAcmeResolver:
          acme:
            email: email@example.com
            emailaddresses: foo@example.com,bar@example.org
            dnsChallenge:
              provider: myProvider
              resolvers:
                - 1.1.1.1
                - 8.8.8.8
            profile: tlsserver
            tlsChallenge: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--certificatesresolvers.myAcmeResolver.acme.email=email@example.com"
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--certificatesresolvers.myAcmeResolver.acme.dnsChallenge.provider=myProvider"
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--certificatesresolvers.myAcmeResolver.acme.dnsChallenge.resolvers=1.1.1.1,8.8.8.8"
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--certificatesresolvers.myAcmeResolver.acme.tlsChallenge=true"
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--certificatesresolvers.myAcmeResolver.acme.emailaddresses=foo@example.com,bar@example.org"
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--certificatesresolvers.myAcmeResolver.acme.profile=tlsserver"


  - it: should have the distributed acme resolver options applied
    set:
      certificatesResolvers:
        my-resolver:
          distributedAcme:
            email: email@example.com
            storage:
              kubernetes: true
            httpChallenge:
              entrypoint: "web"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--certificatesresolvers.my-resolver.distributedAcme.email=email@example.com"
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--certificatesresolvers.my-resolver.distributedAcme.storage.kubernetes=true"
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--certificatesresolvers.my-resolver.distributedAcme.httpChallenge.entrypoint=web"

  - it: should have the tailscale resolver options applied
    set:
      certificatesResolvers:
        my-resolver:
          tailscale: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--certificatesresolvers.my-resolver.tailscale=true"

  - it: should have prometheus annotations with specified values
    set:
      ports:
        metrics:
          port: 9100
      metrics:
        prometheus:
          entryPoint: metrics
    asserts:
      - equal:
          path: spec.template.metadata.annotations
          value:
            prometheus.io/path: /metrics
            prometheus.io/port: "9100"
            prometheus.io/scrape: "true"
  - it: should have prometheus addRoutersLabels enabled
    set:
      metrics:
        prometheus:
          addRoutersLabels: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--metrics.prometheus.addRoutersLabels=true"
  - it: should have http3 enabled, when enabled with advertisedPort
    set:
      ports:
        websecure:
          http3:
            advertisedPort: 443
            enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--entryPoints.websecure.http3"
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--entryPoints.websecure.http3.advertisedPort=443"
  - it: should be possible to enable http3 enabled without a custom advertisedPort
    set:
      ports:
        websecure:
          http3:
            enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--entryPoints.websecure.http3"
      - notContains:
          path: spec.template.spec.containers[0].args
          content: "--entryPoints.websecure.http3.advertisedPort=443"

  - it: should not have http3 config flag by default
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].args
          content: "--entryPoints.websecure.http3"
      - notContains:
          path: spec.template.spec.containers[0].args
          content: "--entryPoints.websecure.http3.advertisedPort=8443"
  - it: should join entrypoints middleware when there are multiples
    set:
      ports:
        websecure:
          middlewares:
            - auth@file
            - strip@kubernetes-crd
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--entryPoints.websecure.http.middlewares=auth@file,strip@kubernetes-crd"
  - it: should apply middleware on entrypoint
    set:
      ports:
        web:
          middlewares:
            - auth@file
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--entryPoints.web.http.middlewares=auth@file"
  - it: should not complain when there are no middlewares on entrypoint
    set:
      ports:
        web:
          middlewares:
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].args
          content: "--entryPoints.web.http.middlewares="
  - it: should fail when user want to use hostnetwork with hostport != containerport
    set:
      hostNetwork: true
      ports:
        websecure:
          port: 443
          hostPort: 443
        web:
          port: 8081
          hostPort: 81
    asserts:
      - failedTemplate:
          errorMessage: "ERROR: All hostPort must match their respective containerPort when `hostNetwork` is enabled"
  - it: should pass when user want to set hostport != containerport without hostNetwork
    set:
      hostNetwork: false
      ports:
        websecure:
          port: 443
          hostPort: 443
        web:
          port: 8081
          hostPort: 81
    asserts:
      - isKind:
          of: Deployment
      - isAPIVersion:
          of: apps/v1
  - it: should have two http3 port when not using hostport
    set:
      ports:
        websecure:
          http3:
            enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            containerPort: 8443
            name: websecure
            protocol: TCP
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            containerPort: 8443
            name: websecure-http3
            protocol: UDP
  - it: should be possible to use hostport with http3
    set:
      ports:
        websecure:
          hostPort: 443
          http3:
            enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            containerPort: 8443
            hostPort: 443
            name: websecure
            protocol: TCP
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            containerPort: 8443
            hostPort: 443
            name: websecure-http3
            protocol: UDP
  - it: should honor http3 advertised port when using hostport
    set:
      ports:
        websecure:
          hostPort: 443
          http3:
            enabled: true
            advertisedPort: 1234
    asserts:
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            containerPort: 8443
            hostPort: 443
            name: websecure
            protocol: TCP
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            containerPort: 8443
            hostPort: 1234
            name: websecure-http3
            protocol: UDP
  - it: should have a custom list of dns nameservers
    set:
      deployment:
        dnsConfig:
          nameservers:
            - 1.1.1.1
            - 2001:db8:30::a
    asserts:
      - equal:
          path: spec.template.spec.dnsConfig.nameservers[0]
          value: "1.1.1.1"
      - equal:
          path: spec.template.spec.dnsConfig.nameservers[1]
          value: "2001:db8:30::a"
  - it: should have a list of dns search domain
    set:
      deployment:
        dnsConfig:
          searches:
            - ns1.svc.cluster-domain.example
            - my.dns.search.suffix
    asserts:
      - equal:
          path: spec.template.spec.dnsConfig.searches[0]
          value: "ns1.svc.cluster-domain.example"
      - equal:
          path: spec.template.spec.dnsConfig.searches[1]
          value: "my.dns.search.suffix"
  - it: should have a custom dns options
    set:
      deployment:
        dnsConfig:
          options:
            - name: ndots
              value: 2
            - name: edns0
    asserts:
      - equal:
          path: spec.template.spec.dnsConfig.options[0].name
          value: "ndots"
      - equal:
          path: spec.template.spec.dnsConfig.options[0].value
          value: 2
      - equal:
          path: spec.template.spec.dnsConfig.options[1].name
          value: "edns0"
  - it: should not have prometheus annotations
    set:
      metrics:
        prometheus:
          serviceMonitor:
            jobLabel: traefik
    asserts:
      - isNull:
          path: spec.template.metadata.annotations.prometheus.io/scrape
  - it: should set runtimeClassName when configured
    set:
      deployment:
        runtimeClassName: ArbitraryRuntimeClass
    asserts:
      - equal:
          path: spec.template.spec.runtimeClassName
          value: ArbitraryRuntimeClass
  - it: should not set runtimeClassName when configured
    set:
      deployment:
        runtimeClassName:
    asserts:
      - isNull:
          path: spec.template.spec.containers[0].runtimeClassName
  - it: should set defaultRuleSyntax when configured
    set:
      core:
        defaultRuleSyntax: v2
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--core.defaultRuleSyntax=v2"
  - it: should not set defaultRuleSyntax by default
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].args
          content: "--core.defaultRuleSyntax=v2"
  - it: should fail when providing bad log format
    set:
      logs:
        general:
          format: "test"
    asserts:
      - failedTemplate:
          errorPattern: "format"
  - it: should set log filePath when configured
    set:
      logs:
        general:
          filePath: "/var/log/traefik.log"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--log.filePath=/var/log/traefik.log"
  - it: should set log noColor when configured
    set:
      logs:
        general:
          noColor: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--log.noColor=true"
  - it: should set log noColor when configured to false as it's default
    set:
      logs:
        general:
          noColor: false
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].args
          content: "--log.noColor=false"
  - it: should not set log noColor when configured and log format is not common
    set:
      logs:
        general:
          format: json
          noColor: true
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].args
          content: "--log.noColor=true"
  - it: should fail when setting unknown log level
    set:
      logs:
        general:
          level: test
    asserts:
      - failedTemplate:
          errorPattern: "level"
  - it: should set allowEmptyServices for kubernetesCRD
    set:
      providers:
        kubernetesCRD:
          allowEmptyServices: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--providers.kubernetescrd.allowEmptyServices=true"
  - it: should unset allowEmptyServices for kubernetesCRD
    set:
      providers:
        kubernetesCRD:
          allowEmptyServices: false
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--providers.kubernetescrd.allowEmptyServices=false"
  - it: should set allowEmptyServices for kubernetesIngress
    set:
      providers:
        kubernetesIngress:
          allowEmptyServices: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--providers.kubernetesingress.allowEmptyServices=true"
  - it: should unset allowEmptyServices for kubernetesIngress
    set:
      providers:
        kubernetesIngress:
          allowEmptyServices: false
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--providers.kubernetesingress.allowEmptyServices=false"

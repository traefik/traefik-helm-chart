suite: Service configuration
templates:
  - service.yaml
tests:
  - it: should provide a single service by default
    asserts:
      - hasDocuments:
          count: 1
  - it: should be possible to disable default service
    set:
      service:
        enabled: false
    asserts:
      - hasDocuments:
          count: 0
  - it: should fail when no ports are exposed
    set:
      ports:
        web:
          expose:
            default: false
        websecure:
          expose:
            default: false
    asserts:
      - failedTemplate:
          errorMessage: "ERROR: Cannot create Service RELEASE-NAME-traefik without ports"
  - it: should be a type LoadBalancer by default
    asserts:
      - equal:
          path: spec.type
          value: LoadBalancer
  - it: should be a custom type when specified via values
    set:
      service:
        type: NodePort
    asserts:
      - equal:
          path: spec.type
          value: NodePort
  - it: should have no annotations by default
    asserts:
      - isNullOrEmpty:
          path: metadata.annotations
  - it: should have customized annotations when specified via values
    set:
      service:
        annotations:
          azure-load-balancer-internal: true
    asserts:
      - equal:
          path: metadata.annotations.azure-load-balancer-internal
          value: true
  - it: should have customized labels when specified via values
    set:
      service:
        labels:
          custom-label: custom-value
    asserts:
      - equal:
          path: metadata.labels.custom-label
          value: custom-value
  - it: should have no load balancer class by default
    asserts:
      - isNull:
          path: spec.loadBalancerClass
  - it: should have custom spec elements when specified via values
    set:
      service:
        spec:
          externalTrafficPolicy: Cluster
          loadBalancerIP: "1.2.3.4"
          clusterIP: "2.3.4.5"
          loadBalancerClass: myclass
          loadBalancerSourceRanges:
            - 192.168.0.1/32
            - 172.16.0.0/16
          externalIPs:
            - "1.2.3.4"
    documentIndex: 0
    asserts:
      - equal:
          path: spec.ports[0].name
          value: web
      - equal:
          path: spec.ports[0].protocol
          value: TCP
      - equal:
          path: spec.externalTrafficPolicy
          value: Cluster
      - equal:
          path: spec.loadBalancerIP
          value: "1.2.3.4"
      - equal:
          path: spec.clusterIP
          value: "2.3.4.5"
      - equal:
          path: spec.loadBalancerSourceRanges[0]
          value: 192.168.0.1/32
      - equal:
          path: spec.loadBalancerSourceRanges[1]
          value: 172.16.0.0/16
      - equal:
          path: spec.externalIPs[0]
          value: "1.2.3.4"
      - equal:
          path: spec.loadBalancerClass
          value: myclass
  - it: should have custom spec elements when specified via values for TCP ports
    set:
      ports:
        web:
          expose:
            default: false
        websecure:
          expose:
            default: false
        tcp:
          port: 3000
          expose:
            default: true
          exposedPort: 8080
          protocol: TCP
    documentIndex: 0
    asserts:
      - equal:
          path: spec.ports[0].name
          value: tcp
      - equal:
          path: spec.ports[0].protocol
          value: TCP
      - equal:
          path: spec.ports[0].port
          value: 8080
  - it: should have custom spec elements when specified via values for UDP ports
    set:
      ports:
        web:
          expose:
            default: false
        websecure:
          expose:
            default: false
        udp:
          port: 3000
          expose:
            default: true
          exposedPort: 8080
          protocol: UDP
    documentIndex: 0
    asserts:
      - equal:
          path: spec.ports[0].name
          value: udp
      - equal:
          path: spec.ports[0].protocol
          value: UDP
      - equal:
          path: spec.ports[0].port
          value: 8080
  - it: should not have ipFamilyPolicy when not specified
    set:
      ports:
        udp:
          port: 3000
          protocol: UDP
    asserts:
      - isNull:
          path: spec.ipFamilyPolicy
        documentIndex: 0
  - it: should have custom ipFamilyPolicy when specified via values
    set:
      service:
        ipFamilyPolicy: PreferDualStack
      ports:
        udp:
          port: 3000
          protocol: UDP
    asserts:
      - equal:
          path: spec.ipFamilyPolicy
          value: PreferDualStack
        documentIndex: 0
  - it: should not have ipFamilies when not specified
    set:
      ports:
        udp:
          port: 3000
          protocol: UDP
    asserts:
      - isNull:
          path: spec.ipFamilies
        documentIndex: 0
  - it: should have custom ipFamilies when specified via values
    set:
      service:
        ipFamilies:
          - IPv6
      ports:
        udp:
          port: 3000
          protocol: UDP
    asserts:
      - equal:
          path: spec.ipFamilies
          value:
            - IPv6
          documentIndex: 0
  - it: should not have appProtocol when not specified
    documentIndex: 0
    asserts:
      - isNull:
          path: spec.ports[0].appProtocol
      - isNull:
          path: spec.ports[1].appProtocol
  - it: should have custom appProtocol when specified via values
    set:
      ports:
        web:
          appProtocol: http
        websecure:
          appProtocol: https
    documentIndex: 0
    asserts:
      - equal:
          path: spec.ports[0].appProtocol
          value: http
      - equal:
          path: spec.ports[1].appProtocol
          value: https
  - it: should use default websecure UDP port when http3 is enabled
    set:
      ports:
        websecure:
          http3:
            enabled: true
          tls:
            enabled: true
    documentIndex: 0
    asserts:
    - contains:
        path: spec.ports
        content:
          port: 443
          name: websecure-http3
          targetPort: websecure-http3
          protocol: UDP
  - it: should be possible to advertise a different http3 UDP port
    set:
      ports:
        websecure:
          http3:
            enabled: true
            advertisedPort: 4443
          tls:
            enabled: true
    documentIndex: 0
    asserts:
    - contains:
        path: spec.ports
        content:
          port: 4443
          name: websecure-http3
          targetPort: websecure-http3
          protocol: UDP
  - it: should split TCP and UDP Service on http3 when single is false
    set:
      ports:
        websecure:
          http3:
            enabled: true
      service:
        single: false
    asserts:
    - hasDocuments:
        count: 2
    - contains:
        path: spec.ports
        content:
          port: 443
          name: websecure
          targetPort: websecure
          protocol: TCP
      documentIndex: 0
    - contains:
        path: spec.ports
        content:
          port: 443
          name: websecure-http3
          targetPort: websecure-http3
          protocol: UDP
      documentIndex: 1
  - it: should use advertisedPort with splitted TCP and UDP Service on http3 when single is false
    set:
      ports:
        websecure:
          http3:
            enabled: true
            advertisedPort: 4443
      service:
        single: false
    asserts:
    - hasDocuments:
        count: 2
    - contains:
        path: spec.ports
        content:
          port: 443
          name: websecure
          targetPort: websecure
          protocol: TCP
      documentIndex: 0
    - contains:
        path: spec.ports
        content:
          port: 4443
          name: websecure-http3
          targetPort: websecure-http3
          protocol: UDP
      documentIndex: 1

  - it: should not be possible to use http3 without enabling tls
    set:
      ports:
        websecure:
          tls:
            enabled: false
          http3:
            enabled: true
    asserts:
      - failedTemplate:
          errorMessage: "ERROR: You cannot enable http3 without enabling tls"
  - it: should use helm managed namespace as default behavior UDP
    set:
      ports:
        udp:
          port: 3000
          protocol: UDP
    asserts:
      - equal:
          path: metadata.namespace
          value: NAMESPACE
  - it: should use helm managed namespace as default behavior TCP
    set:
      ports:
        tcp:
          port: 3000
          protocol: TCP
    asserts:
      - equal:
          path: metadata.namespace
          value: NAMESPACE
  - it: should accept overridden namespace UDP
    set:
      namespaceOverride: "traefik-ns-override"
      ports:
        udp:
          port: 3000
          protocol: UDP
    asserts:
      - equal:
          path: metadata.namespace
          value: "traefik-ns-override"
  - it: should accept overridden namespace TCP
    set:
      namespaceOverride: "traefik-ns-override"
      ports:
        tcp:
          port: 3000
          protocol: TCP
    asserts:
      - equal:
          path: metadata.namespace
          value: "traefik-ns-override"
  - it: should have different target port when targetPort is different from port
    set:
      ports:
        web:
          port: 8080
          exposedPort: 80
          expose:
            default: true
          targetPort: 80
        websecure:
          port: 443
          exposedPort: 443
          expose:
            default: true
          targetPort: 80
    documentIndex: 0
    asserts:
      - equal:
          path: spec.ports[0].port
          value: 80
      - equal:
          path: spec.ports[0].targetPort
          value: 80
      - equal:
          path: spec.ports[1].port
          value: 443
      - equal:
          path: spec.ports[1].targetPort
          value: 80

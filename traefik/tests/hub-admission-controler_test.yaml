suite: Traefik Hub admission controller configuration
templates:
  - hub-admission-controller.yaml
set:
  hub:
    token: xxx
    apimanagement:
      enabled: true
tests:
  - it: should not deploy anything when hub is not enabled
    set:
      hub:
        token: null
    asserts:
      - hasDocuments:
          count: 0
  - it: should not deploy anything when hub is not enabled
    asserts:
      - hasDocuments:
          count: 4
  - it: should not deploy anything when api management is disabled
    set:
      hub:
        apimanagement:
          enabled: false
    asserts:
      - hasDocuments:
          count: 0
  - it: should not deploy anything when offline mode is enabled
    set:
      hub:
        offline: true
        apimanagement:
          enabled: true
    asserts:
      - hasDocuments:
          count: 0
  - it: should render hub-agent-cert secret
    documentIndex: 0
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: hub-agent-cert
  - it: should be possible to specify custom webhook certificate secret name
    set:
      hub:
        apimanagement:
          admission:
            secretName: test
    documentIndex: 0
    asserts:
      - equal:
          path: "metadata.name"
          value: test
  - it: should render hub-acp webhook
    documentIndex: 1
    asserts:
      - isKind:
          of: MutatingWebhookConfiguration
      - equal:
          path: metadata.name
          value: hub-acp-RELEASE-NAME-NAMESPACE
  - it: should render hub-api webhook
    documentIndex: 2
    asserts:
      - isKind:
          of: MutatingWebhookConfiguration
      - equal:
          path: metadata.name
          value: hub-api-RELEASE-NAME-NAMESPACE
  - it: should render admission service
    documentIndex: 3
    asserts:
      - isKind:
          of: Service
      - equal:
          path: metadata.name
          value: admission
  - it: should issue a secret with a certificate
    documentIndex: 0
    asserts:
      - matchRegex:
          path: data["tls.crt"]
          pattern: .*==
  - it: should issue a webhook with a certificate
    documentIndex: 1
    asserts:
      - matchRegex:
          path: webhooks[0].clientConfig.caBundle
          pattern: .*==
  - it: should issue a webhook with a certificate
    documentIndex: 2
    asserts:
      - matchRegex:
          path: webhooks[0].clientConfig.caBundle
          pattern: .*==
  - it: should issue a service with good selectors
    documentIndex: 3
    asserts:
      - equal:
          path: spec.selector
          value:
            app.kubernetes.io/name: traefik
            app.kubernetes.io/instance: RELEASE-NAME-NAMESPACE
  - it: should watch the specified namespaces
    set:
      hub:
        namespaces: [one, two, one]
    documentIndex: 2
    asserts:
      - equal:
          path: "webhooks[*].namespaceSelector.matchExpressions"
          value:
            - key: kubernetes.io/metadata.name
              operator: In
              values:
                - NAMESPACE
                - one
                - two
  - it: should render a default name for admission secret
    documentIndex: 0
    asserts:
      - equal:
          path: "metadata.name"
          value: hub-agent-cert
  - it: should be possible to specify custom webhook certificate
    set:
      hub:
        apimanagement:
          admission:
            secretName: test
    documentIndex: 0
    asserts:
      - equal:
          path: "metadata.name"
          value: test
  - it: should be possible to specify custom webhook certificate
    set:
      hub:
        apimanagement:
          admission:
            customWebhookCertificate:
              tls.crt: cert
              tls.key: key
    asserts:
      - equal:
          path: "data"
          value:
            tls.crt: cert
            tls.key: key
        documentIndex: 0
      - equal:
          path: "webhooks[*].clientConfig.caBundle"
          value: cert
        documentIndex: 1
  - it: should be possible to specify custom annotations
    documentIndex: 1
    set:
      hub:
        apimanagement:
          admission:
            annotations:
              cert-manager.io/inject-ca-from: example1/webhook1-certificate
    asserts:
      - isKind:
          of: MutatingWebhookConfiguration
      - equal:
          path: metadata.annotations
          value:
            cert-manager.io/inject-ca-from: example1/webhook1-certificate

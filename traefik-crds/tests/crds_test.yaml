suite: CRDs
templates:
  - crds.yaml
tests:
  - it: should have all Traefik crds by default
    set:
      traefik: true
    asserts:
      - hasDocuments:
          count: 10
      - isKind:
          of: CustomResourceDefinition
      - equal:
          path: spec.group
          value: traefik.io
      - matchRegex:
          path: spec.names.kind
          pattern: ^(IngressRoute|IngressRouteTCP|IngressRouteUDP|Middleware|MiddlewareTCP|ServersTransport|ServersTransportTCP|TLSOption|TLSStore|TraefikService)$
      - equal:
          path: metadata.annotations["helm.sh/resource-policy"]
          value: keep

  - it: should have all Traefik Hub crds
    set:
      traefik: false
      hub: true
    asserts:
      - hasDocuments:
          count: 13
      - isKind:
          of: CustomResourceDefinition
      - equal:
          path: spec.group
          value: hub.traefik.io
      - matchRegex:
          path: spec.names.kind
          pattern: ^(AccessControlPolicy|AIService|APIBundle|APICatalogItem|APIPlan|APIPortal|APIRateLimit|API|APIVersion|ManagedSubscription|ManagedApplication|APIAuth|APIPortalAuth)$
      - equal:
          path: metadata.annotations["helm.sh/resource-policy"]
          value: keep

  - it: should have all Gateway API crds
    set:
      traefik: false
      gatewayAPI: true
    asserts:
      - hasDocuments:
          count: 5
      - isKind:
          of: CustomResourceDefinition
      - equal:
          path: spec.group
          value: gateway.networking.k8s.io
      - matchRegex:
          path: spec.names.kind
          pattern: ^(GatewayClass|Gateway|GRPCRoute|HTTPRoute|ReferenceGrant)$
      - equal:
          path: metadata.annotations["helm.sh/resource-policy"]
          value: keep

  - it: should have all Gateway API crds without helm keep resource policy
    set:
      traefik: false
      gatewayAPI: true
      deleteOnUninstall: true
    asserts:
      - hasDocuments:
          count: 5
      - isKind:
          of: CustomResourceDefinition
      - equal:
          path: spec.group
          value: gateway.networking.k8s.io
      - matchRegex:
          path: spec.names.kind
          pattern: ^(GatewayClass|Gateway|GRPCRoute|HTTPRoute|ReferenceGrant)$
      - notExists:
          path: metadata.annotations["helm.sh/resource-policy"]

  - it: should have all Gateway API experimental crds
    set:
      traefik: false
      gatewayAPIExperimental: true
    asserts:
      - hasDocuments:
          count: 11
      - isKind:
          of: CustomResourceDefinition
      - matchRegex:
          path: spec.group
          pattern: ^gateway\.networking\.(k8s|x-k8s)\.io$
      - equal:
          path: metadata.annotations["helm.sh/resource-policy"]
          value: keep

  - it: should have all Gateway API experimental crds without helm keep resource policy
    set:
      traefik: false
      gatewayAPIExperimental: true
      deleteOnUninstall: true
    asserts:
      - hasDocuments:
          count: 11
      - isKind:
          of: CustomResourceDefinition
      - matchRegex:
          path: spec.group
          pattern: ^gateway\.networking\.(k8s|x-k8s)\.io$
      - notExists:
          path: metadata.annotations["helm.sh/resource-policy"]

  - it: should fail when both Gateway API standard and experimental are enabled
    set:
      traefik: false
      gatewayAPI: true
      gatewayAPIExperimental: true
    asserts:
      - failedTemplate:
          errorMessage: "Cannot enable both gatewayAPI and gatewayAPIExperimental at the same time. Please choose either standard or experimental Gateway API CRDs, but not both."
